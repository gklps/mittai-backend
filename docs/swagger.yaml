definitions:
  models.Address:
    properties:
      addressID:
        type: integer
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
      state:
        type: string
      userID:
        type: integer
      zipCode:
        type: string
    type: object
  models.Cart:
    properties:
      created_at:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.CartItem'
        type: array
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.CartItem:
    properties:
      created_at:
        type: string
      product:
        $ref: '#/definitions/models.ProductWeight'
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  models.Product:
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_urls:
        items:
          type: string
        type: array
      ingredients:
        type: string
      name:
        type: string
      nutritional_info:
        type: string
      updated_at:
        type: string
      weights:
        items:
          $ref: '#/definitions/models.ProductWeight'
        type: array
    type: object
  models.ProductWeight:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      price:
        type: number
      productID:
        type: integer
      stockAvailability:
        type: integer
      weight:
        type: integer
    type: object
  models.User:
    properties:
      address:
        items:
          $ref: '#/definitions/models.Address'
        type: array
      contactNumber:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      userID:
        type: integer
      verifiedAccount:
        type: boolean
    type: object
  services.AddProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      image_urls:
        items:
          type: string
        type: array
      ingredients:
        type: string
      name:
        type: string
      nutritional_info:
        type: string
    type: object
  services.AddProductResponse:
    properties:
      message:
        type: string
      product_id:
        type: integer
    type: object
  services.AddProductWeightRequest:
    properties:
      price:
        type: number
      stock_availability:
        type: integer
      weight:
        type: integer
    type: object
  services.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  services.SuccessResponse:
    properties:
      message:
        type: string
      product_id:
        type: integer
    type: object
  services.UpdateProductWeightRequest:
    properties:
      price:
        type: number
      stock_availability:
        type: integer
      weight:
        type: integer
    type: object
info:
  contact: {}
paths:
  /cart/{userID}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User's cart retrieved successfully
          schema:
            $ref: '#/definitions/models.Cart'
      summary: Get the user's cart by user ID
      tags:
      - Cart
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Cart item object
        in: body
        name: cartItem
        required: true
        schema:
          $ref: '#/definitions/models.CartItem'
      produces:
      - application/json
      responses:
        "200":
          description: Item added to cart successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Add an item to the cart
      tags:
      - Cart
  /cart/{userID}/{productWeightID}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Product Weight ID
        in: path
        name: productWeightID
        required: true
        type: string
      responses:
        "200":
          description: Cart item removed successfully
          schema:
            type: string
        "404":
          description: Cart item not found
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Remove a cart item from the cart
      tags:
      - Cart
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Product Weight ID
        in: path
        name: productWeightID
        required: true
        type: string
      - description: Cart item object
        in: body
        name: cartItem
        required: true
        schema:
          $ref: '#/definitions/models.CartItem'
      produces:
      - application/json
      responses:
        "200":
          description: Cart item updated successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "404":
          description: Cart item not found
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Update the quantity of a cart item
      tags:
      - Cart
  /products:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Failed to retrieve products
      summary: List all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/services.AddProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product added successfully
          schema:
            $ref: '#/definitions/services.AddProductResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to add product
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Add a new product to the inventory
      tags:
      - Products
  /products/{id}:
    delete:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Product deleted successfully
        "500":
          description: Failed to delete product
      summary: Delete a product from the inventory
      tags:
      - Products
    get:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/models.Product'
        "500":
          description: Failed to retrieve product details
      summary: Get product details by ID
      tags:
      - Products
    put:
      consumes:
      - multipart/form-data
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        required: true
        type: string
      - description: Product category
        in: formData
        name: category
        required: true
        type: string
      - description: Product ingredients
        in: formData
        name: ingredients
        required: true
        type: string
      - description: Product nutritional information
        in: formData
        name: nutritional_info
        required: true
        type: string
      - description: Product image URLs (comma-separated)
        in: formData
        name: image_urls
        required: true
        type: string
      responses:
        "200":
          description: Product updated successfully
        "400":
          description: Invalid form data
        "500":
          description: Failed to update product
      summary: Update an existing product in the inventory
      tags:
      - Products
  /productweight/{productID}/weights:
    post:
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      - description: Product weight details
        in: body
        name: weight
        required: true
        schema:
          $ref: '#/definitions/services.AddProductWeightRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Weight added successfully
          schema:
            $ref: '#/definitions/services.SuccessResponse'
        "400":
          description: Invalid request body or product ID
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to add weight
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Add a new weight variant for a product
      tags:
      - Product Weights
  /productweight/{productID}/weights/{weightID}:
    put:
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      - description: Weight ID
        in: path
        name: weightID
        required: true
        type: string
      - description: Product weight details
        in: body
        name: weight
        required: true
        schema:
          $ref: '#/definitions/services.UpdateProductWeightRequest'
      responses:
        "200":
          description: Weight updated successfully
        "400":
          description: Invalid request body or product/weight ID
        "500":
          description: Failed to update weight
      summary: Update an existing weight variant for a product
      tags:
      - Product Weights
  /users:
    post:
      consumes:
      - application/json
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "409":
          description: Contact number already exists
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Failed to retrieve user
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Retrieve a user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to update user
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Update a user
      tags:
      - Users
swagger: "2.0"
